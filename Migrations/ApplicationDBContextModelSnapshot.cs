// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WIRKDEVELOPER.Areas.Identity.Data;

#nullable disable

namespace WIRKDEVELOPER.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WIRKDEVELOPER.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Account.Admin", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Account.Anaesthesiologist", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("AnaesthesiologistLicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Anaesthesiologists");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Account.Nurse", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NurseLicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Account.Pharmacist", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PharmacyLicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Pharmacists");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Account.Surgeon", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgeonLicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Surgeons");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Active", b =>
                {
                    b.Property<int>("ActiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveID"), 1L, 1);

                    b.Property<string>("ActiveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiveID");

                    b.ToTable("active");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.ActiveIngredient", b =>
                {
                    b.Property<int>("ActiveIngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveIngredientID"), 1L, 1);

                    b.Property<string>("ActiveIngredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActiveName")
                        .HasColumnType("int");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiveIngredientID");

                    b.HasIndex("ActiveName");

                    b.ToTable("activeIngredients");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Addm", b =>
                {
                    b.Property<int>("AddmID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddmID"), 1L, 1);

                    b.Property<int>("AnAllergiesID")
                        .HasColumnType("int");

                    b.Property<int>("AnConditionsID")
                        .HasColumnType("int");

                    b.Property<int>("AnCurrentMedicationID")
                        .HasColumnType("int");

                    b.Property<int>("BedID")
                        .HasColumnType("int");

                    b.Property<int>("ChronicMedicationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationActiveID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentCodeID")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentID")
                        .HasColumnType("int");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("AddmID");

                    b.HasIndex("AnAllergiesID");

                    b.HasIndex("AnConditionsID");

                    b.HasIndex("AnCurrentMedicationID");

                    b.HasIndex("BedID");

                    b.HasIndex("ChronicMedicationID");

                    b.HasIndex("MedicationActiveID");

                    b.HasIndex("PatientID");

                    b.HasIndex("TreatmentCodeID");

                    b.HasIndex("WardID");

                    b.ToTable("addm");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admin.AnConditions", b =>
                {
                    b.Property<int>("AnConditionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnConditionsID"), 1L, 1);

                    b.Property<string>("Diagnose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("chroniccode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnConditionsID");

                    b.ToTable("anconditions");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admin.AnCurrentMedication", b =>
                {
                    b.Property<int>("AnCurrentMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnCurrentMedicationID"), 1L, 1);

                    b.Property<int>("ChronicMedicationID")
                        .HasColumnType("int");

                    b.HasKey("AnCurrentMedicationID");

                    b.HasIndex("ChronicMedicationID");

                    b.ToTable("ancurrentmedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admin.ChronicMedication", b =>
                {
                    b.Property<int>("ChronicMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChronicMedicationID"), 1L, 1);

                    b.Property<string>("ChronicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DosageFormID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ChronicMedicationID");

                    b.HasIndex("DosageFormID");

                    b.HasIndex("ScheduleId");

                    b.ToTable("chronicmedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admin.ContraIndication", b =>
                {
                    b.Property<int>("ContraIndicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContraIndicationID"), 1L, 1);

                    b.Property<int?>("ActiveID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("AnConditionsID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ContraIndicationID");

                    b.HasIndex("ActiveID");

                    b.HasIndex("AnConditionsID");

                    b.ToTable("contraindication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admin.MedicationActive", b =>
                {
                    b.Property<int>("MedicationActiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationActiveID"), 1L, 1);

                    b.Property<int?>("ActiveID")
                        .HasColumnType("int");

                    b.Property<int?>("ChronicMedicationID")
                        .HasColumnType("int");

                    b.HasKey("MedicationActiveID");

                    b.HasIndex("ActiveID");

                    b.HasIndex("ChronicMedicationID")
                        .IsUnique()
                        .HasFilter("[ChronicMedicationID] IS NOT NULL");

                    b.ToTable("MedicationActive");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Administrator", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"), 1L, 1);

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdminSurname")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admission", b =>
                {
                    b.Property<int>("AdmissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionID"), 1L, 1);

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.Property<int>("BookingNewPatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("AdmissionID");

                    b.HasIndex("BedId");

                    b.HasIndex("BookingNewPatientID");

                    b.HasIndex("NurseId");

                    b.ToTable("admission");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.AlertMedication", b =>
                {
                    b.Property<int>("AlertMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlertMedicationID"), 1L, 1);

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyMedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("AlertMedicationID");

                    b.ToTable("AlertMedications");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.AnAllergies", b =>
                {
                    b.Property<int>("AllergiesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllergiesID"), 1L, 1);

                    b.Property<int>("ActiveID")
                        .HasColumnType("int");

                    b.Property<int>("ActiveId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("AllergiesID");

                    b.HasIndex("ActiveId");

                    b.HasIndex("PatientId");

                    b.ToTable("anallergies");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.AnVitals", b =>
                {
                    b.Property<int>("AnVitalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnVitalID"), 1L, 1);

                    b.Property<string>("Reading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vital")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnVitalID");

                    b.ToTable("anvitals");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Bed", b =>
                {
                    b.Property<int>("BedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedID"), 1L, 1);

                    b.Property<int>("BedNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("BedID");

                    b.HasIndex("WardId");

                    b.ToTable("Bed");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationTheatreID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("OperationTheatreID");

                    b.HasIndex("UserId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.BookingNewPatient", b =>
                {
                    b.Property<int>("BookingNewPatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingNewPatientID"), 1L, 1);

                    b.Property<string>("Bed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingNewPatientIDNUmber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingNewPatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingNewPatientSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationTheatreID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingNewPatientID");

                    b.HasIndex("OperationTheatreID");

                    b.HasIndex("PatientID");

                    b.HasIndex("UserId");

                    b.ToTable("bookingNewPatients");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.BookingPatientTreatmentCode", b =>
                {
                    b.Property<int>("BookingPatientTreatmentCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingPatientTreatmentCodeID"), 1L, 1);

                    b.Property<int>("BookingNewPatientID")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentCodeID")
                        .HasColumnType("int");

                    b.HasKey("BookingPatientTreatmentCodeID");

                    b.HasIndex("BookingNewPatientID");

                    b.HasIndex("TreatmentCodeID");

                    b.ToTable("BookingPatientTreatmentCode");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.BookingTreatmentCode", b =>
                {
                    b.Property<int>("BookingTreatmentCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingTreatmentCodeID"), 1L, 1);

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentCodeID")
                        .HasColumnType("int");

                    b.HasKey("BookingTreatmentCodeID");

                    b.HasIndex("BookingID");

                    b.HasIndex("TreatmentCodeID");

                    b.ToTable("BookingTreatmentCode");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Condition", b =>
                {
                    b.Property<int>("ConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionID"), 1L, 1);

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConditionID");

                    b.HasIndex("AdminID");

                    b.ToTable("conditions");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.ConditionDiagnosis", b =>
                {
                    b.Property<int>("ConditionDiagnosisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionDiagnosisID"), 1L, 1);

                    b.Property<string>("ConditionDiagnosisName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConditionDiagnosisID");

                    b.ToTable("conditionDiagnoses");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Contra_indication", b =>
                {
                    b.Property<int>("ContraIndication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContraIndication"), 1L, 1);

                    b.Property<int>("ActiveIngredientID")
                        .HasColumnType("int");

                    b.Property<int>("ConditionDiagnosisID")
                        .HasColumnType("int");

                    b.HasKey("ContraIndication");

                    b.HasIndex("ActiveIngredientID");

                    b.HasIndex("ConditionDiagnosisID");

                    b.ToTable("contra_Indications");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.CurrentMedication", b =>
                {
                    b.Property<int>("CurrentMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrentMedicationID"), 1L, 1);

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("CurrentMedicationID");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("CurrentMedications");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.DayHospital", b =>
                {
                    b.Property<int>("DayHospitalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayHospitalID"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhurshaseManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeManager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DayHospitalID");

                    b.ToTable("dayHospitals");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Discharge", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AdmissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("NurseNotes")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID");

                    b.HasIndex("AdmissionId");

                    b.ToTable("Discharges");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.DischargePatient", b =>
                {
                    b.Property<int>("DischargePatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DischargePatientId"), 1L, 1);

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientGender")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("staffId")
                        .HasColumnType("int");

                    b.HasKey("DischargePatientId");

                    b.ToTable("discharge");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.DosageForm", b =>
                {
                    b.Property<int>("DosageFormID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DosageFormID"), 1L, 1);

                    b.Property<string>("DosageFormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DosageFormID");

                    b.ToTable("dosageForms");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.MedicalProfessional", b =>
                {
                    b.Property<int>("MedicalProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalProfessionId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactNumber")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationNumber")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalProfessionId");

                    b.ToTable("medicalProfessionals");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Medication", b =>
                {
                    b.Property<int>("MedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationID"), 1L, 1);

                    b.Property<string>("ActiveIngredientStrength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActiveIngridientID")
                        .HasColumnType("int");

                    b.Property<int>("DosageFormID")
                        .HasColumnType("int");

                    b.Property<int?>("DosageFormName")
                        .HasColumnType("int");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<int>("RestockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationID");

                    b.HasIndex("ActiveIngridientID");

                    b.HasIndex("DosageFormName");

                    b.ToTable("medications");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.MedicationAdministration", b =>
                {
                    b.Property<int>("MedicationAdministrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationAdministrationID"), 1L, 1);

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationName")
                        .HasColumnType("int");

                    b.Property<int>("PatientName")
                        .HasColumnType("int");

                    b.Property<string>("PrescriberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrescriberPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("MedicationAdministrationID");

                    b.ToTable("medAdmin");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.MedicationPrescription", b =>
                {
                    b.Property<int>("MedicationPrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationPrescriptionID"), 1L, 1);

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyMedicationID")
                        .HasColumnType("int");

                    b.Property<int>("Prescription")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionsPrescriptionID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityGiven")
                        .HasColumnType("int");

                    b.HasKey("MedicationPrescriptionID");

                    b.HasIndex("PharmacyMedicationID");

                    b.HasIndex("PrescriptionsPrescriptionID");

                    b.ToTable("medicationPrescriptions");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Notes", b =>
                {
                    b.Property<int>("NotesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotesID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationNoteID")
                        .HasColumnType("int");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderMedicationID")
                        .HasColumnType("int");

                    b.HasKey("NotesID");

                    b.HasIndex("OrderMedicationID");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.NotesOfOrders", b =>
                {
                    b.Property<int>("NotesOfOrdersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotesOfOrdersID"), 1L, 1);

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderMedicationID")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyMedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotesOfOrdersID");

                    b.ToTable("notesoforders");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.OperationTheatre", b =>
                {
                    b.Property<int>("OperationTheatreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperationTheatreID"), 1L, 1);

                    b.Property<string>("OperationTheatreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperationTheatreID");

                    b.ToTable("operationTheatres");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Order", b =>
                {
                    b.Property<int>("AnOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnOrderID"), 1L, 1);

                    b.Property<int?>("AddmID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Urgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnOrderID");

                    b.HasIndex("AddmID");

                    b.ToTable("order");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.OrderCreate", b =>
                {
                    b.Property<int>("OrderCreateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderCreateID"), 1L, 1);

                    b.Property<int?>("AddmID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("AnOrderID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyMedicationID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Urgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderCreateID");

                    b.HasIndex("AddmID");

                    b.HasIndex("AnOrderID");

                    b.HasIndex("PharmacyMedicationID");

                    b.ToTable("ordercreate");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.OrderItems", b =>
                {
                    b.Property<int>("OrderItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemsID"), 1L, 1);

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderCreateID")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyMedicationID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemsID");

                    b.HasIndex("OrderCreateID");

                    b.HasIndex("PharmacyMedicationID");

                    b.ToTable("orderItems");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.OrderMedication", b =>
                {
                    b.Property<int>("OrderMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderMedicationID"), 1L, 1);

                    b.Property<int?>("AnOrderID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyMedicationID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderMedicationID");

                    b.HasIndex("AnOrderID");

                    b.HasIndex("PharmacyMedicationID");

                    b.ToTable("ordermedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"), 1L, 1);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllergiesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientIDNO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("contactNumber")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surbub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("wardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("zip")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("PatientID");

                    b.ToTable("patients");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientCondition", b =>
                {
                    b.Property<int>("PatientConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientConditionID"), 1L, 1);

                    b.Property<int?>("ConditionID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("PatientConditionID");

                    b.HasIndex("ConditionID");

                    b.HasIndex("PatientID");

                    b.ToTable("patientConditions");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientHistory.PatientAllergies", b =>
                {
                    b.Property<int>("PatientAllergiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientAllergiesId"), 1L, 1);

                    b.Property<int?>("ActiveID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("PatientAllergiesId");

                    b.HasIndex("ActiveID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientHistory.PatientChronicCondition", b =>
                {
                    b.Property<int>("PatientChronicConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientChronicConditionId"), 1L, 1);

                    b.Property<int?>("AnConditionsID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("PatientChronicConditionId");

                    b.HasIndex("AnConditionsID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientChronicConditions");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientHistory.PatientMedication", b =>
                {
                    b.Property<int>("PatientMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientMedicationId"), 1L, 1);

                    b.Property<int?>("ChronicMedicationID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("PatientMedicationId");

                    b.HasIndex("ChronicMedicationID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientMedications");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientVisit", b =>
                {
                    b.Property<int>("PatientVisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientVisitID"), 1L, 1);

                    b.Property<DateTime?>("AdmissionTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("BedID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DischargeTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("PatientVisitID");

                    b.HasIndex("BedID");

                    b.HasIndex("PatientID");

                    b.ToTable("patientVisits");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientVitals", b =>
                {
                    b.Property<int>("PatientVitalsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientVitalsID"), 1L, 1);

                    b.Property<int>("BookingNewPatientID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<double>("Reading")
                        .HasColumnType("float");

                    b.Property<double?>("Reading2")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<DateTime?>("Time")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("VitalID")
                        .HasColumnType("int");

                    b.HasKey("PatientVitalsID");

                    b.HasIndex("BookingNewPatientID");

                    b.HasIndex("PatientID");

                    b.HasIndex("VitalID");

                    b.ToTable("patientVitals");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PharmacyMedication", b =>
                {
                    b.Property<int>("PharmacyMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyMedicationID"), 1L, 1);

                    b.Property<int>("DosageFormID")
                        .HasColumnType("int");

                    b.Property<string>("PharmacyMedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("stockhand")
                        .HasColumnType("int");

                    b.Property<int>("stocklevel")
                        .HasColumnType("int");

                    b.HasKey("PharmacyMedicationID");

                    b.HasIndex("DosageFormID");

                    b.HasIndex("ScheduleId");

                    b.ToTable("pharmacyMedications");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PharmacyMedicationIngredient", b =>
                {
                    b.Property<int>("PharmacyMedicationIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyMedicationIngredientId"), 1L, 1);

                    b.Property<int>("ActiveID")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyMedicationID")
                        .HasColumnType("int");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PharmacyMedicationIngredientId");

                    b.HasIndex("ActiveID");

                    b.HasIndex("PharmacyMedicationID");

                    b.ToTable("PharmacyMedicationIngredients");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PharmStock", b =>
                {
                    b.Property<int>("PharmStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmStockId"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PharmacyMedicationID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PharmStockId");

                    b.HasIndex("PharmacyMedicationID");

                    b.ToTable("pharmStock");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IgnoreReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NurseID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Prescriber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurgeonID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Urgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("NurseID");

                    b.HasIndex("PatientID");

                    b.HasIndex("SurgeonID");

                    b.ToTable("prescriptions");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PrescriptionMedication", b =>
                {
                    b.Property<int>("PrescriptionMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionMedicationID"), 1L, 1);

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyMedicationID")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityGiven")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionMedicationID");

                    b.HasIndex("PharmacyMedicationID");

                    b.HasIndex("PrescriptionID");

                    b.ToTable("prescriptionMedications");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PrescriptionMedicationViewModel", b =>
                {
                    b.Property<int>("PrescriptionMedicationViewModelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionMedicationViewModelID"), 1L, 1);

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyMedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionViewModelID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityGiven")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionMedicationViewModelID");

                    b.HasIndex("PrescriptionViewModelID");

                    b.ToTable("PrescriptionMedicationViewModel");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PrescriptionViewModel", b =>
                {
                    b.Property<int>("PrescriptionViewModelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionViewModelID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAlerts")
                        .HasColumnType("bit");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IgnoreReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prescriber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Urgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionViewModelID");

                    b.ToTable("prescriptionViewModels");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Ranges", b =>
                {
                    b.Property<int>("RangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RangeID"), 1L, 1);

                    b.Property<int>("AnAllergies")
                        .HasColumnType("int");

                    b.Property<int>("BedID")
                        .HasColumnType("int");

                    b.Property<int>("ConditionID")
                        .HasColumnType("int");

                    b.Property<int>("CurrentMedicationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationID")
                        .HasColumnType("int");

                    b.Property<int>("PatientGender")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentCodeID")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentID")
                        .HasColumnType("int");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("RangeID");

                    b.HasIndex("AnAllergies");

                    b.HasIndex("BedID");

                    b.HasIndex("ConditionID");

                    b.HasIndex("CurrentMedicationID");

                    b.HasIndex("PatientID");

                    b.HasIndex("TreatmentID");

                    b.HasIndex("WardID");

                    b.ToTable("ranges");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Rejection", b =>
                {
                    b.Property<int>("RejectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RejectID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RejectID");

                    b.ToTable("rejections");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<string>("ScheduleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleId");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.StockReceived", b =>
                {
                    b.Property<int>("StockReceivedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockReceivedId"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PharmStockId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityRecived")
                        .HasColumnType("int");

                    b.HasKey("StockReceivedId");

                    b.HasIndex("PharmStockId");

                    b.ToTable("StockReceiveds");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Suburb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Suburbs");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.TreatmentCode", b =>
                {
                    b.Property<int>("TreatmentCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentCodeID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICDCODE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentCodeID");

                    b.ToTable("treatmentCodes");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.ViewPatient", b =>
                {
                    b.Property<int>("ViewPatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewPatientID"), 1L, 1);

                    b.Property<string>("Bed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Patient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ViewPatientID");

                    b.ToTable("viewrecords");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.VitalRanges", b =>
                {
                    b.Property<int>("VitalRangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalRangeID"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maximumrange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Minimumrange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VitalRangeID");

                    b.ToTable("vitalranges");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Vitals", b =>
                {
                    b.Property<int>("VitalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Maximumrange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Minimumrange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Units")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("VitalID");

                    b.ToTable("Vitals");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Ward", b =>
                {
                    b.Property<int>("WardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardID"), 1L, 1);

                    b.Property<int>("NoOfBeds")
                        .HasColumnType("int");

                    b.Property<int>("NurseResponsible")
                        .HasColumnType("int");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardID");

                    b.ToTable("ward");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Account.Admin", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Account.Anaesthesiologist", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Account.Nurse", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Account.Pharmacist", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Account.Surgeon", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.ActiveIngredient", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Active", "Active")
                        .WithMany()
                        .HasForeignKey("ActiveName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Active");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Addm", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.AnAllergies", "AnAllergies")
                        .WithMany()
                        .HasForeignKey("AnAllergiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Admin.AnConditions", "AnConditions")
                        .WithMany()
                        .HasForeignKey("AnConditionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Admin.AnCurrentMedication", "AnCurrentMedication")
                        .WithMany()
                        .HasForeignKey("AnCurrentMedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Admin.ChronicMedication", "ChronicMedication")
                        .WithMany()
                        .HasForeignKey("ChronicMedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Admin.MedicationActive", "MedicationActive")
                        .WithMany()
                        .HasForeignKey("MedicationActiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.TreatmentCode", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnAllergies");

                    b.Navigation("AnConditions");

                    b.Navigation("AnCurrentMedication");

                    b.Navigation("Bed");

                    b.Navigation("ChronicMedication");

                    b.Navigation("MedicationActive");

                    b.Navigation("Patient");

                    b.Navigation("TreatmentCode");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admin.AnCurrentMedication", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Admin.ChronicMedication", "ChronicMedication")
                        .WithMany()
                        .HasForeignKey("ChronicMedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChronicMedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admin.ChronicMedication", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.DosageForm", "DosageForm")
                        .WithMany()
                        .HasForeignKey("DosageFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageForm");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admin.ContraIndication", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Active", "Active")
                        .WithMany()
                        .HasForeignKey("ActiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Admin.AnConditions", "AnConditions")
                        .WithMany()
                        .HasForeignKey("AnConditionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Active");

                    b.Navigation("AnConditions");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admin.MedicationActive", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Active", "Active")
                        .WithMany()
                        .HasForeignKey("ActiveID");

                    b.HasOne("WIRKDEVELOPER.Models.Admin.ChronicMedication", "ChronicMedication")
                        .WithOne("MedicationActive")
                        .HasForeignKey("WIRKDEVELOPER.Models.Admin.MedicationActive", "ChronicMedicationID");

                    b.Navigation("Active");

                    b.Navigation("ChronicMedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admission", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.BookingNewPatient", "BookingNewPatient")
                        .WithMany()
                        .HasForeignKey("BookingNewPatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Account.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("BookingNewPatient");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.AnAllergies", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.ActiveIngredient", "Active")
                        .WithMany()
                        .HasForeignKey("ActiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Active");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Bed", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Booking", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.OperationTheatre", "OperationTheatre")
                        .WithMany()
                        .HasForeignKey("OperationTheatreID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Account.Anaesthesiologist", "Anaesthesiologist")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Anaesthesiologist");

                    b.Navigation("OperationTheatre");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.BookingNewPatient", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.OperationTheatre", "OperationTheatre")
                        .WithMany()
                        .HasForeignKey("OperationTheatreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Account.Anaesthesiologist", "Anaesthesiologist")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("WIRKDEVELOPER.Models.Account.Surgeon", "Surgeon")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Anaesthesiologist");

                    b.Navigation("OperationTheatre");

                    b.Navigation("Patient");

                    b.Navigation("Surgeon");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.BookingPatientTreatmentCode", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.BookingNewPatient", "BookingNewPatient")
                        .WithMany("TreatmentCodes")
                        .HasForeignKey("BookingNewPatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.TreatmentCode", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingNewPatient");

                    b.Navigation("TreatmentCode");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.BookingTreatmentCode", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Booking", "Booking")
                        .WithMany("BookingTreatmentCodes")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.TreatmentCode", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("TreatmentCode");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.City", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Condition", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Administrator", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Contra_indication", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.ActiveIngredient", "ActiveIngredient")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.ConditionDiagnosis", "ConditionDiagnosis")
                        .WithMany()
                        .HasForeignKey("ConditionDiagnosisID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredient");

                    b.Navigation("ConditionDiagnosis");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.CurrentMedication", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Discharge", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Admission", "Admission")
                        .WithMany()
                        .HasForeignKey("AdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Medication", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.ActiveIngredient", "ActiveIngredient")
                        .WithMany()
                        .HasForeignKey("ActiveIngridientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.DosageForm", "DosageFormN")
                        .WithMany()
                        .HasForeignKey("DosageFormName");

                    b.Navigation("ActiveIngredient");

                    b.Navigation("DosageFormN");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.MedicationPrescription", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Prescription", "Prescriptions")
                        .WithMany()
                        .HasForeignKey("PrescriptionsPrescriptionID");

                    b.Navigation("PharmacyMedication");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Notes", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.OrderMedication", "OrderMedication")
                        .WithMany("notes")
                        .HasForeignKey("OrderMedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderMedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Order", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Patient", "Addm")
                        .WithMany()
                        .HasForeignKey("AddmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addm");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.OrderCreate", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("AddmID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("AnOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Patient");

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.OrderItems", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.OrderCreate", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderCreateID");

                    b.HasOne("WIRKDEVELOPER.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.OrderMedication", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Order", "Order")
                        .WithMany("OrderMedications")
                        .HasForeignKey("AnOrderID");

                    b.HasOne("WIRKDEVELOPER.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientCondition", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionID");

                    b.HasOne("WIRKDEVELOPER.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.Navigation("Condition");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientHistory.PatientAllergies", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Active", "Active")
                        .WithMany()
                        .HasForeignKey("ActiveID");

                    b.HasOne("WIRKDEVELOPER.Models.Patient", null)
                        .WithMany("PatientAllergies")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Active");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientHistory.PatientChronicCondition", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Admin.AnConditions", "AnConditions")
                        .WithMany()
                        .HasForeignKey("AnConditionsID");

                    b.HasOne("WIRKDEVELOPER.Models.Patient", null)
                        .WithMany("PatientChronicCondition")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnConditions");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientHistory.PatientMedication", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Admin.ChronicMedication", "ChronicMedication")
                        .WithMany()
                        .HasForeignKey("ChronicMedicationID");

                    b.HasOne("WIRKDEVELOPER.Models.Patient", null)
                        .WithMany("PatientMedication")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChronicMedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientVisit", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Bed", "bed")
                        .WithMany()
                        .HasForeignKey("BedID");

                    b.HasOne("WIRKDEVELOPER.Models.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bed");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PatientVitals", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.BookingNewPatient", "BookingNewPatient")
                        .WithMany()
                        .HasForeignKey("BookingNewPatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.HasOne("WIRKDEVELOPER.Models.Vitals", "Vitals")
                        .WithMany()
                        .HasForeignKey("VitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingNewPatient");

                    b.Navigation("Patient");

                    b.Navigation("Vitals");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PharmacyMedication", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.DosageForm", "DosageForm")
                        .WithMany()
                        .HasForeignKey("DosageFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageForm");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PharmacyMedicationIngredient", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Active", "Active")
                        .WithMany()
                        .HasForeignKey("ActiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany("Ingredients")
                        .HasForeignKey("PharmacyMedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Active");

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PharmStock", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Prescription", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.Account.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseID");

                    b.HasOne("WIRKDEVELOPER.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Account.Surgeon", "Surgeon")
                        .WithMany()
                        .HasForeignKey("SurgeonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Patient");

                    b.Navigation("Surgeon");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PrescriptionMedication", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionMedications")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PharmacyMedication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PrescriptionMedicationViewModel", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.PrescriptionViewModel", null)
                        .WithMany("Medications")
                        .HasForeignKey("PrescriptionViewModelID");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Ranges", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.AnAllergies", "Allergies")
                        .WithMany()
                        .HasForeignKey("AnAllergies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.CurrentMedication", "CurrentMedication")
                        .WithMany()
                        .HasForeignKey("CurrentMedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.TreatmentCode", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIRKDEVELOPER.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergies");

                    b.Navigation("Bed");

                    b.Navigation("Condition");

                    b.Navigation("CurrentMedication");

                    b.Navigation("Patient");

                    b.Navigation("TreatmentCode");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.StockReceived", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.PharmStock", "PharmStock")
                        .WithMany()
                        .HasForeignKey("PharmStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PharmStock");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Suburb", b =>
                {
                    b.HasOne("WIRKDEVELOPER.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Admin.ChronicMedication", b =>
                {
                    b.Navigation("MedicationActive")
                        .IsRequired();
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Booking", b =>
                {
                    b.Navigation("BookingTreatmentCodes");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.BookingNewPatient", b =>
                {
                    b.Navigation("TreatmentCodes");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Order", b =>
                {
                    b.Navigation("OrderMedications");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.OrderCreate", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.OrderMedication", b =>
                {
                    b.Navigation("notes");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Patient", b =>
                {
                    b.Navigation("PatientAllergies");

                    b.Navigation("PatientChronicCondition");

                    b.Navigation("PatientMedication");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PharmacyMedication", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionMedications");
                });

            modelBuilder.Entity("WIRKDEVELOPER.Models.PrescriptionViewModel", b =>
                {
                    b.Navigation("Medications");
                });
#pragma warning restore 612, 618
        }
    }
}
