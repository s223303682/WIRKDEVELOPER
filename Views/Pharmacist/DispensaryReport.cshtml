@using WIRKDEVELOPER.Models
@using Microsoft.AspNetCore.Identity
@using WIRKDEVELOPER.Areas.Identity.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@model WIRKDEVELOPER.Models.PharmacistReportViewModel

@{
    Layout = "~/Views/Shared/Pharmacy.cshtml";
}

<div class="container">
    
    @if (ViewBag.ErrorMessage != null)
    {
            <div class="alert alert-danger">@ViewBag.ErrorMessage</div>
    }
    <div class="form-card" id="card-content">
        <br />
        <br />
        <h3 class="mb-3">Dispensary Report</h3>
        <br />
        <br />
        <p><strong>Pharmacist:</strong>  <h1> Dr <span class="text-dark">@UserManager.GetUserAsync(User).Result.FirstName  @UserManager.GetUserAsync(User).Result.LastName</span> </h1></p>
        <p><strong>Date Range:</strong> @Model.StartDate.ToString("dd MMMM yyyy") – @Model.EndDate.ToString("dd MMMM yyyy")</p>
        <p><strong>Report Generated:</strong> @Model.ReportGeneratedDate.ToString("dd MMMM yyyy")</p>

        <table class="table table-striped mt-3">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Patient</th>
                    <th>Script By</th>
                    <th>Medication</th>
                    <th>Quantity</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.PrescriptionItems)
                {
                    <tr>
                        <td>@item.Date.ToString("yyyy-MM-dd")</td>
                        <td>@item.PatientName</td>
                        <td>@item.Prescriber</td>
                        <td>@item.Medication</td>
                        <td>@item.Quantity</td>
                        <td>@item.Status</td>
                    </tr>
                }
            </tbody>
        </table>

        <p><strong>Total Scripts Dispensed:</strong> @Model.TotalScriptsDispensed</p>
        <p><strong>Total Scripts Rejected:</strong> @Model.TotalScriptsRejected</p>

        <h3 class="mt-4">Summary per Medicine:</h3>
        <table class="table table-striped mt-2">
            <thead>
                <tr>
                    <th>Medicine</th>
                    <th>Quantity Dispensed</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var summary in Model.MedicationSummaries)
                {
                    <tr>
                        <td>@summary.MedicationName</td>
                        <td>@summary.TotalQuantityDispensed</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="d-flex justify-content-end">
        <button onclick="downloadPDF()" class="btn btn-primary btn-sm">
            <i class="fas fa-download"></i> Download PDF
        </button>
    </div>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }


    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <script>
        function downloadPDF() {
            const element = document.getElementById('card-content');

            // Set the options for html2pdf, including jsPDF configuration
            const opt = {
                margin: 1,
                filename: 'ReportView.pdf',
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: { scale: 2 },
                jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' },
                pagebreak: { mode: ['css', 'legacy'] } // Handle page breaks
            };

            html2pdf()
                .from(element)
                .set(opt)
                .toPdf()
                .get('pdf')
                .then(function (pdf) {
                    const totalPages = pdf.internal.getNumberOfPages(); // Get total number of pages

                    // Add page numbers
                    for (let i = 1; i <= totalPages; i++) {
                        pdf.setPage(i);
                        pdf.setFontSize(10);
                        // Add page number at bottom-right of the page
                        pdf.text('Page ' + i + ' of ' + totalPages, pdf.internal.pageSize.getWidth() - 50, pdf.internal.pageSize.getHeight() - 10);
                    }
                })
                .save('Report.pdf') // Save the PDF with page numbers
                .catch(err => {
                    console.error('Error generating PDF:', err);
                });
        }
    </script>
}
